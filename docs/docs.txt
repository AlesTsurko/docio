doc Docio categories 
`DocsParser docsMap` sorted by categories.
------
doc Docio packagePath
------
doc Docio packageInfo 
Returns package.json as an instance of Map.
------
doc Docio packageName
------
doc Docio templatePath
------
doc Docio copyTemplate(templateDir)
------
doc Docio extractDocs 
Generates `docs.txt` using [DocsExtractor](docsextractor.html).
------
doc Docio generateSite 
Use this only after you did parsing.
------
doc Docio getDocsTxt
------
doc Docio openDocsForPackageWithName(packageName)
------
doc Docio DocsParser 
[DocsParser](docsparser.html)
------
doc Docio PageGenerator 
[PageGenerator](pagegenerator.html)
------
doc Docio outputPath 
Path to the `docs` in the destination package's directory.
------
doc Docio generateDocs 
Generates documentation for the package at `packagePath`.
------
doc Docio printDocFor(query)
Prints documentation for the given `query`.

The method will try to extract the documentation from the `doc` comments, 
if the `docs/docs.txt` doesn't exist in the package's directory.

Examples of query:
```
"ProtoName"
"ProtoName slotName"
"AddonName ProtoName slotName"
```
------
metadoc Docio category 
API
------
doc DocsParser docsMap 
The map generated after parse process.
------
doc DocsParser parse 
Parses `docs.txt` generated by [DocsExtractor] and fills up the `docsMap`.
------
metadoc DocsParser category 
API
------
doc PageGenerator init
------
doc PageGenerator generateSite
------
doc PageGenerator generateMainPage 
Generates the `index.html` from the `main_template.html`.
------
doc PageGenerator generatePrototypesPages 
Generates a page for each of the prototype of the given map. 
This method creates a page for each object from the prototype_template.html.
------
metadoc PageGenerator category 
API
------
metadoc PageGenerator description 
Generates documentation pages.
------
