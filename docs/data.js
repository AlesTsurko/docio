data = JSON.stringify({"DocsParser":{"category":"<p>API<\/p>","slots":{"docsMap":"<p>The map generated after parse process.<\/p>","parse":"<p>Parses <code>docs.txt<\/code> generated by [DocsExtractor] and fills up the <code>docsMap<\/code>.<\/p>"}},"PageGenerator":{"category":"<p>API<\/p>","slots":{"generatePrototypesPages":"<p>Generates a page for each of the prototype of the given map.\nThis method creates a page for each object from the prototype_template.html.<\/p>","init":"","generateSite":"","generateMainPage":"<p>Generates the <code>index.html<\/code> from the <code>main_template.html<\/code>.<\/p>"},"description":"<p>Generates documentation pages.<\/p>"},"Docio":{"category":"<p>API<\/p>","slots":{"categories":"<p><code>DocsParser docsMap<\/code> sorted by categories.<\/p>","outputPath":"<p>Path to the <code>docs<\/code> in the destination package's directory.<\/p>","PageGenerator":"<p><a href=\"pagegenerator.html\">PageGenerator<\/a><\/p>","generateSite":"<p>Use this only after you did parsing.<\/p>","packageName":"","extractDocs":"<p>Generates <code>docs.txt<\/code> using <a href=\"docsextractor.html\">DocsExtractor<\/a>.<\/p>","templatePath":"","DocsParser":"<p><a href=\"docsparser.html\">DocsParser<\/a><\/p>","openDocsForPackageWithName(packageName)":"","packagePath":"","copyTemplate(templateDir)":"","getDocsTxt":"","generateDocs":"<p>Generates documentation for the package at <code>packagePath<\/code>.<\/p>","printDocFor(query)":"<p>Prints documentation for the given <code>query<\/code>.<\/p>\n\n<p>The method will try to extract the documentation from the <code>doc<\/code> comments,\nif the <code>docs\/docs.txt<\/code> doesn't exist in the package's directory.<\/p>\n\n<p>Examples of query:\n<code>\n\"ProtoName\"\n\"ProtoName slotName\"\n\"AddonName ProtoName slotName\"\n<\/code><\/p>","packageInfo":"<p>Returns package.json as an instance of Map.<\/p>"}}});