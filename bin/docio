#!/usr/local/bin/io

Eerie
Markdown

Directory setCurrentWorkingDirectory(System launchPath)

// parse docs.txt
Docio := Object clone do(
    prototypes := Map clone
    modules := Map clone
    categories := Map clone
    sourcesPath := nil
    outputPath := nil
    //doc Docio packageInfo Returns package.json as an instance of Map.
    packageInfo := nil
    //doc Docio packageName Returns the name of the package as it's specified in the package.json.
    packageName := nil
    templatePath := nil


    init := method(
        checkNumberOfArguments()
        parseOptions()
        parsePackageJSON()
        copyTemplate(Directory with(templatePath))
        parseDocs()
    )

    checkNumberOfArguments := method(
        if(System args size < 2,
            showUsage()
            System exit(0)
        )
    )

    showUsage := method(
        "Docio â€” documentation generator for Eerie packages.\nUsage:\n\tdocio package=package_dir [template=path_to_template]" println
    )

    parseOptions := method(
        options := System getOptions(System args)
        parseHelpOption(options)
        parsePackageOption(options)
        parseTemplateOption(options)
    )

    parseHelpOption := method(options,
        if(options hasKey("help"), showUsage(); System exit(0))
    )

    parsePackageOption := method(options,
        sourcesPath = options at("package") stringByExpandingTilde
        if(sourcesPath == nil,
            showUsage()
            System exit(0)
            ,
            outputPath = sourcesPath .. "/docs"
        )
    )

    parseTemplateOption := method(options,
        docioPackage := Eerie envs at(0) packageNamed("Docio")
        templatePath = options at("template") stringByExpandingTilde
        if(templatePath == nil,
            templatePath = docioPackage path .. "/template"
        )
    )

    parsePackageJSON := method(
        packageJson := getDestinationPackageJSON()
        packageInfo = Yajl parseJson(packageJson contents)
        packageName = packageInfo at("name")

        if(packageName == nil,
          "Error: Please provide the name of the package in the package.json" println
          System exit(0)
        )
    )

    getDestinationPackageJSON := method(
        packageJson := File with(sourcesPath .. "/package.json")
        if(packageJson exists,
            packageJson open
            return packageJson
            ,

            "Error: package.json didn't found" println
            System exit(0)
        )
    )

    copyTemplate := method(templateDir,
        // switch to template directory
        currentDirectoryPath := Directory currentWorkingDirectory
        Directory setCurrentWorkingDirectory(templateDir path)
        // copy files
        Directory walk(item, 
            if(item type == "Directory",
                createDirectoryInDestination(item),
                copyFileToDestination(item)
            )
        )
        // switch back to current directory
        Directory setCurrentWorkingDirectory(currentDirectoryPath)
    )

    createDirectoryInDestination := method(directory,
        directoryPath := outputPath .. "/" .. directory path afterSeq("./")
        Directory with(directoryPath) createIfAbsent
    )

    copyFileToDestination := method(file,
        if(file path pathExtension != "DS_Store" and file name != "main_template.html" and file name != "prototype_template.html" and file path pathExtension != "io",
            destinationPath := outputPath .. "/" .. file path afterSeq("./")
            file copyToPath(destinationPath)
        )
    )

    parseDocs := method(
        extractDocs()
        docsTxt := getDocsTxt()
        docsTxt contents split("------\n") foreach(entry, parseDocEntry(entry))
        generateCategories()
        writeDocsToJson()
    )

    extractDocs := method(
        System args = list("", sourcesPath)
        doFile("DocsExtractor.io")
    )

    getDocsTxt := method(
        docsTxt := File with(Path with(sourcesPath, "/docs/docs.txt"))
        docsTxt exists ifFalse(
            "Docio parseDocs(#{sourcesPath}/docs/docs.txt) fails\n" interpolate println
            System exit(0)
        )

        return docsTxt
    )

    parseDocEntry := method(docEntry,
        header := docEntry beforeSeq("\n") afterSeq(" ") 
        if(header, parseDocHeader(header, docEntry))
    )

    parseDocHeader := method(header, docEntry,
        headerCopy := header asMutable strip asSymbol
        protoName := headerCopy beforeSeq(" ") ?asMutable ?strip ?asSymbol
        prototypes atIfAbsentPut(protoName, Map clone atPut("slots", Map clone))
        if(protoName == nil, writeln("ERROR: " .. headerCopy))
        parseDocSlot(headerCopy, docEntry, protoName)
    )

    parseDocSlot := method(header, docEntry, protoName,
        slotName := header afterSeq(" ") ?asMutable ?strip ?asSymbol
        if(slotName == nil, writeln("ERROR: " .. header))
        description := docEntry afterSeq("\n") markdownToHTML

        isSlot := docEntry beginsWithSeq("doc")
        if(isSlot, 
            prototypes at(protoName) at("slots") atPut(slotName, description)
            ,
            prototypes at(protoName) atPut(slotName, description)
        )
    )

    generateCategories := method(
        firstProto := nil
        firstProtoName := prototypes keys sort detect(k, prototypes at(k) at("category"))

        catNameMap := Map clone
        prototypes values select(at("category")) foreach(m, 
            count := catNameMap at(m at("category")) 
            if(count == nil, count = 0)
            catNameMap atPut(m at("category"), count + 1)
        )

        maxCount := 0
        catName := nil
        catNameMap foreach(name, count,
            if(count > maxCount, catName = name; maxCount = count)
        )

        if(catName == nil, catName = "Misc")
        categories atIfAbsentPut(catName asMutable strip, prototypes)
    )

    writeDocsToJson := method(
        if(prototypes size < 1, return)
        docsJson := File with(outputPath .. "/data.js") create
        docsJson open
        docsJson setContents("data = JSON.stringify(" .. prototypes asJson .. ");")
        docsJson close
    )
)
Docio clone := Docio

//doc DocioPageGenerator Generates documentation pages.
DocioPageGenerator := Object clone do(
    mainTemplate := nil
    prototypeTemplate := nil
    templatePath := nil
    outputPath := nil
    currentPrototype := nil
    currentPrototypeName := nil

    ///doc DocioPageGenerator init(templatePath, outputPath)
    init := method(tPath, oPath,
        templatePath = tPath 
        outputPath = oPath

        mainTemplate = File with(tPath .. "/main_template.html")

        mainTemplate exists ifFalse(
            "Error: main_template.html didn't found" println
            return
        )

        mainTemplate open

        prototypeTemplate = File with(tPath .. "/prototype_template.html")

        prototypeTemplate exists ifFalse(
            "Error: prototype_template.html didn't found" println
            return
        )

        prototypeTemplate open
    )

    ///doc DocioPageGenerator generateMainPage Generates the index.html from the main_template.html.
    generateMainPage := method(
        mainPage := File with(outputPath .. "/index.html") remove open
        mainPage setContents(mainTemplate contents interpolate)
    )

    /*doc DocioPageGenerator generatePrototypesPages 
    Generates a page for each of the prototype of the given map.
    This method creates a page for each object from the prototype_template.html.
    */
    generatePrototypesPages := method(prototypes,
        Directory with(outputPath .. "/docs") createIfAbsent
        prototypes foreach(key, value,
            currentPrototypeName = key
            currentPrototype = value

            prototypePage := File with(outputPath .. "/docs/#{currentPrototypeName asLowercase}.html" interpolate) remove open
            prototypePage setContents(prototypeTemplate contents interpolate) close
        )
    )
)

// main
DocioPageGenerator clone := DocioPageGenerator

Docio init

DocioPageGenerator init(Docio templatePath, Docio outputPath)

DocioPageGenerator generateMainPage()

DocioPageGenerator generatePrototypesPages(Docio prototypes)
