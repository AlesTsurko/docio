#!/usr/local/bin/io

Eerie

Directory setCurrentWorkingDirectory(System launchPath)

expandUserPath := method(inputPath,
    inputPath ?asMutable ?replaceFirstSeq("~/", User homeDirectory path .. "/")
)

// parse docs.txt
Docio := Object clone do(
    prototypes := Map clone
    modules := Map clone
    categories := Map clone
    sourcesPath := nil
    outputPath := nil
    ///doc Docio packageInfo Returns package.json as an instance of Map.
    packageInfo := nil
    ///doc Docio packageName Returns the name of the package as it's specified in the package.json.
    packageName := nil
    packageDescription := nil
    templatePath := nil

    showUsage := method(
        "Docio â€” documentation generator for Eerie packages.\nUsage:\n\tdocio package=package_dir [template=path_to_template]" println
    )

    init := method(
        if(System args size < 2,
            showUsage()
            return
        )

        options := System getOptions(System args)

        // help option
        if(options hasKey("help"), showUsage(); return)

        // package path argument
        sourcesPath = expandUserPath(options at("package")) 
        if(sourcesPath == nil,
            showUsage()
            return
        )

        outputPath = sourcesPath .. "/docs"

        docioPackage := Eerie envs at(0) packageNamed("Docio")

        // getting package.json
        packageJson := File with(sourcesPath .. "/package.json")
        if(packageJson exists,
            packageJson open,

            "Error: package.json didn't found" println
            return
        )

        // setting packageInfo
        packageInfo = Yajl parseJson(packageJson contents)

        // getting package name
        packageName = packageInfo at("name")

        if(packageName == nil,
          "Error: Please provide the name of the package in the package.json" println
          return
        )

        // Getting template
        templatePath = expandUserPath(options at("template"))
        if(templatePath == nil,
            templatePath = docioPackage path .. "/template"
        )

        // extract raw docs
        System args = list("", sourcesPath)
        doFile("DocsExtractor.io")

        // copy template
        copyTemplate(Directory with(templatePath))

        readFolder()
    )

    copyTemplate := method(templateDir,
        templateFiles := list()
        templateFiles appendSeq(templateDir files)

        getFiles := method(templateDir,
            templateDir directories foreach(dir,
                if((dir path containsSeq("./.") not) and (dir path containsSeq("../") not),
                    templateFiles appendSeq(dir files)
                    getFiles(dir)
                )
            )
        )

        getFiles(templateDir)

        templateFiles foreach(item,
            dirPath := outputPath .. item parentDirectory path afterSeq(templateDir path)
            Directory with(dirPath) createIfAbsent
            filePath := outputPath .. item path afterSeq(templateDir path)
            if(filePath containsAnyCaseSeq(".ds_store") not and filePath containsSeq("main_template.html") not and filePath containsSeq("prototype_template.html") not and filePath pathExtension != "io",
                /* filePath println */
                item copyToPath(filePath)
            )
        )
    )

    readFolder := method(
        file := File with(Path with(sourcesPath, "/docs/docs.txt"))
        file exists ifFalse(
            "Docio readFolder(#{sourcesPath}/docs/docs.txt) fails\n" interpolate println
            return
        )

        file contents split("------\n") foreach(docEntry,
            isSlot := docEntry beginsWithSeq("doc")
            header := docEntry beforeSeq("\n") afterSeq(" ") 

            if(header,
                header = header asMutable strip asSymbol

                protoName := header beforeSeq(" ") ?asMutable ?strip ?asSymbol
                
                slotName := header afterSeq(" ") ?asMutable ?strip ?asSymbol

                description := docEntry afterSeq("\n")
                
                prots := prototypes atIfAbsentPut(protoName, Map clone atPut("slots", Map clone))

                if(protoName == nil or slotName == nil, writeln("ERROR: " .. docEntry))

                if(isSlot, 
                    prots at("slots") atPut(slotName, description),
                    // else
                    prots atPut(slotName, description)
                ),

                // else
                if(protoName == nil or slotName == nil, writeln("ERROR: " .. docEntry))
            )
        )

        generateCategories()
    )

    generateCategories := method(
        firstProto := nil
        firstProtoName := prototypes keys sort detect(k, prototypes at(k) at("category"))

        catNameMap := Map clone
        prototypes values select(at("category")) foreach(m, 
            count := catNameMap at(m at("category")) 
            if(count == nil, count = 0)
            catNameMap atPut(m at("category"), count + 1)
        )

        maxCount := 0
        catName := nil
        catNameMap foreach(name, count,
            if(count > maxCount, catName = name; maxCount = count)
        )

        if(catName == nil, catName = "Misc")
        categories atIfAbsentPut(catName asMutable strip, prototypes)
    )
)
Docio clone := Docio

//doc DocioPageGenerator Generates documentation pages.
DocioPageGenerator := Object clone do(
    mainTemplate := nil
    prototypeTemplate := nil
    templatePath := nil
    outputPath := nil
    currentPrototype := nil
    currentPrototypeName := nil

    //doc DocioPageGenerator init(templatePath, outputPath)
    init := method(tPath, oPath,
        templatePath = tPath 
        outputPath = oPath

        mainTemplate = File with(tPath .. "/main_template.html")

        mainTemplate exists ifFalse(
            "Error: main_template.html didn't found" println
            return
        )

        mainTemplate open

        prototypeTemplate = File with(tPath .. "/prototype_template.html")

        prototypeTemplate exists ifFalse(
            "Error: prototype_template.html didn't found" println
            return
        )

        prototypeTemplate open
    )

    //doc DocioPageGenerator generateMainPage Generates the index.html from the main_template.html.
    generateMainPage := method(
        mainPage := File with(outputPath .. "/index.html") remove open
        mainPage setContents(mainTemplate contents interpolate)
    )

    /*doc DocioPageGenerator generatePrototypesPages 
    Generates a page for each of the prototype of the given map.
    This method creates a page for each object from the prototype_template.html.
    */
    generatePrototypesPages := method(prototypes,
        Directory with(outputPath .. "/docs") createIfAbsent
        prototypes foreach(key, value,
            currentPrototypeName = key
            currentPrototype = value

            prototypePage := File with(outputPath .. "/docs/#{currentPrototypeName asLowercase}.html" interpolate) remove open
            prototypePage setContents(prototypeTemplate contents interpolate) close
        )
    )
)

// main
DocioPageGenerator clone := DocioPageGenerator

Docio init

DocioPageGenerator init(Docio templatePath, Docio outputPath)

DocioPageGenerator generateMainPage()

DocioPageGenerator generatePrototypesPages(Docio prototypes)
